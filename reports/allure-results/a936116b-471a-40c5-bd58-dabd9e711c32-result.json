{"name": "test_get_all_users", "status": "failed", "statusDetails": {"message": "AssertionError: Response doesn't match schema: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\n\nFailed validating 'additionalProperties' in schema['items']:\n    {'additionalProperties': False,\n     'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\n                    'email': {'format': 'email', 'type': 'string'},\n                    'id': {'type': 'integer'},\n                    'name': {'type': 'string'},\n                    'phone': {'type': 'string'}},\n     'required': ['id', 'name', 'email'],\n     'type': 'object'}\n\nOn instance[0]:\n    {'address': {'city': 'Gwenborough',\n                 'geo': {'lat': '-37.3159', 'lng': '81.1496'},\n                 'street': 'Kulas Light',\n                 'suite': 'Apt. 556',\n                 'zipcode': '92998-3874'},\n     'company': {'bs': 'harness real-time e-markets',\n                 'catchPhrase': 'Multi-layered client-server neural-net',\n                 'name': 'Romaguera-Crona'},\n     'email': 'Sincere@april.biz',\n     'id': 1,\n     'name': 'Leanne Graham',\n     'phone': '1-770-736-8031 x56442',\n     'username': 'Bret',\n     'website': 'hildegard.org'}", "trace": "response = <Response [200]>\nschema = {'definitions': {'user': {'additionalProperties': False, 'properties': {'created_at': {'format': 'date-time', 'type': .....}, 'required': ['id', 'name', 'email'], 'type': 'object'}}, 'items': {'$ref': '#/definitions/user'}, 'type': 'array'}\n\n    @staticmethod\n    def assert_schema_valid(response, schema):\n        \"\"\"\n        Assert that the response JSON matches the given schema.\n    \n        Args:\n            response: The response object\n            schema: JSONSchema to validate against\n    \n        Raises:\n            AssertionError: If schema validation fails\n        \"\"\"\n        json_data = APIAssertions.assert_json_response(response)\n        try:\n>           jsonschema.validate(instance=json_data, schema=schema)\n\nutils\\assertions.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = [{'address': {'city': 'Gwenborough', 'geo': {'lat': '-37.3159', 'lng': '81.1496'}, 'street': 'Kulas Light', 'suite': '...chronised bottom-line interface', 'name': 'Considine-Lockman'}, 'email': 'Karley_Dach@jasper.info', 'id': 6, ...}, ...]\nschema = {'definitions': {'user': {'additionalProperties': False, 'properties': {'created_at': {'format': 'date-time', 'type': .....}, 'required': ['id', 'name', 'email'], 'type': 'object'}}, 'items': {'$ref': '#/definitions/user'}, 'type': 'array'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'definitions': {'user': {'additionalProperties': False, 'properties': {'created_at': {'fo..., 'name', 'email'], 'type': 'object'}}, 'items': {'$ref': '#/definitions/user'}, 'type': 'array'}, format_checker=None)\nerror = <ValidationError: \"Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\nE           \nE           Failed validating 'additionalProperties' in schema['items']:\nE               {'additionalProperties': False,\nE                'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\nE                               'email': {'format': 'email', 'type': 'string'},\nE                               'id': {'type': 'integer'},\nE                               'name': {'type': 'string'},\nE                               'phone': {'type': 'string'}},\nE                'required': ['id', 'name', 'email'],\nE                'type': 'object'}\nE           \nE           On instance[0]:\nE               {'address': {'city': 'Gwenborough',\nE                            'geo': {'lat': '-37.3159', 'lng': '81.1496'},\nE                            'street': 'Kulas Light',\nE                            'suite': 'Apt. 556',\nE                            'zipcode': '92998-3874'},\nE                'company': {'bs': 'harness real-time e-markets',\nE                            'catchPhrase': 'Multi-layered client-server neural-net',\nE                            'name': 'Romaguera-Crona'},\nE                'email': 'Sincere@april.biz',\nE                'id': 1,\nE                'name': 'Leanne Graham',\nE                'phone': '1-770-736-8031 x56442',\nE                'username': 'Bret',\nE                'website': 'hildegard.org'}\n\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\jsonschema\\validators.py:1307: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.TestUsersAPI object at 0x0000023E029539D0>\napi_client = <api_client.client.APIClient object at 0x0000023E028C30E0>\n\n    @allure.story(\"Get all users\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_get_all_users(self, api_client):\n        \"\"\"Test getting a list of all users.\"\"\"\n        # Arrange\n        endpoint = \"/users\"\n    \n        # Act\n        with allure.step(\"Send GET request to /users endpoint\"):\n            response = api_client.get(endpoint)\n    \n        # Assert\n        with allure.step(\"Verify response status code is 200\"):\n            APIAssertions.assert_status_code(response, 200)\n    \n        with allure.step(\"Verify response contains valid JSON\"):\n            json_data = APIAssertions.assert_json_response(response)\n    \n        with allure.step(\"Verify response matches schema\"):\n>           APIAssertions.assert_schema_valid(response, USERS_LIST_SCHEMA)\n\ntests\\test_api.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>\nschema = {'definitions': {'user': {'additionalProperties': False, 'properties': {'created_at': {'format': 'date-time', 'type': .....}, 'required': ['id', 'name', 'email'], 'type': 'object'}}, 'items': {'$ref': '#/definitions/user'}, 'type': 'array'}\n\n    @staticmethod\n    def assert_schema_valid(response, schema):\n        \"\"\"\n        Assert that the response JSON matches the given schema.\n    \n        Args:\n            response: The response object\n            schema: JSONSchema to validate against\n    \n        Raises:\n            AssertionError: If schema validation fails\n        \"\"\"\n        json_data = APIAssertions.assert_json_response(response)\n        try:\n            jsonschema.validate(instance=json_data, schema=schema)\n        except jsonschema.exceptions.ValidationError as e:\n>           raise AssertionError(f\"Response doesn't match schema: {str(e)}\")\nE           AssertionError: Response doesn't match schema: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\nE           \nE           Failed validating 'additionalProperties' in schema['items']:\nE               {'additionalProperties': False,\nE                'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\nE                               'email': {'format': 'email', 'type': 'string'},\nE                               'id': {'type': 'integer'},\nE                               'name': {'type': 'string'},\nE                               'phone': {'type': 'string'}},\nE                'required': ['id', 'name', 'email'],\nE                'type': 'object'}\nE           \nE           On instance[0]:\nE               {'address': {'city': 'Gwenborough',\nE                            'geo': {'lat': '-37.3159', 'lng': '81.1496'},\nE                            'street': 'Kulas Light',\nE                            'suite': 'Apt. 556',\nE                            'zipcode': '92998-3874'},\nE                'company': {'bs': 'harness real-time e-markets',\nE                            'catchPhrase': 'Multi-layered client-server neural-net',\nE                            'name': 'Romaguera-Crona'},\nE                'email': 'Sincere@april.biz',\nE                'id': 1,\nE                'name': 'Leanne Graham',\nE                'phone': '1-770-736-8031 x56442',\nE                'username': 'Bret',\nE                'website': 'hildegard.org'}\n\nutils\\assertions.py:58: AssertionError"}, "description": "Test getting a list of all users.", "steps": [{"name": "Send GET request to /users endpoint", "status": "passed", "start": 1745835199671, "stop": 1745835201044}, {"name": "Verify response status code is 200", "status": "passed", "start": 1745835201045, "stop": 1745835201045}, {"name": "Verify response contains valid JSON", "status": "passed", "start": 1745835201045, "stop": 1745835201045}, {"name": "Verify response matches schema", "status": "failed", "statusDetails": {"message": "AssertionError: Response doesn't match schema: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\n\nFailed validating 'additionalProperties' in schema['items']:\n    {'additionalProperties': False,\n     'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\n                    'email': {'format': 'email', 'type': 'string'},\n                    'id': {'type': 'integer'},\n                    'name': {'type': 'string'},\n                    'phone': {'type': 'string'}},\n     'required': ['id', 'name', 'email'],\n     'type': 'object'}\n\nOn instance[0]:\n    {'address': {'city': 'Gwenborough',\n                 'geo': {'lat': '-37.3159', 'lng': '81.1496'},\n                 'street': 'Kulas Light',\n                 'suite': 'Apt. 556',\n                 'zipcode': '92998-3874'},\n     'company': {'bs': 'harness real-time e-markets',\n                 'catchPhrase': 'Multi-layered client-server neural-net',\n                 'name': 'Romaguera-Crona'},\n     'email': 'Sincere@april.biz',\n     'id': 1,\n     'name': 'Leanne Graham',\n     'phone': '1-770-736-8031 x56442',\n     'username': 'Bret',\n     'website': 'hildegard.org'}\n", "trace": "  File \"C:\\Users\\HP\\Desktop\\rest_api_framework\\tests\\test_api.py\", line 30, in test_get_all_users\n    APIAssertions.assert_schema_valid(response, USERS_LIST_SCHEMA)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\HP\\Desktop\\rest_api_framework\\utils\\assertions.py\", line 58, in assert_schema_valid\n    raise AssertionError(f\"Response doesn't match schema: {str(e)}\")\n"}, "start": 1745835201045, "stop": 1745835201076}], "attachments": [{"name": "log", "source": "8ccd0569-c676-41c9-98bd-236b60826bc4-attachment.txt", "type": "text/plain"}], "start": 1745835199671, "stop": 1745835201083, "uuid": "838b9e4f-2ed7-4f8d-ac6d-06f8d4c9ecf5", "historyId": "d5fac058a231546a05d750983e864391", "testCaseId": "d5fac058a231546a05d750983e864391", "fullName": "tests.test_api.TestUsersAPI#test_get_all_users", "labels": [{"name": "epic", "value": "REST API Testing Framework"}, {"name": "feature", "value": "Users API"}, {"name": "severity", "value": "normal"}, {"name": "story", "value": "Get all users"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestUsersAPI"}, {"name": "host", "value": "DESKTOP-B9J8G71"}, {"name": "thread", "value": "10672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}