{"name": "test_get_user_by_id[2]", "status": "failed", "statusDetails": {"message": "AssertionError: Response doesn't match schema: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\n                    'email': {'format': 'email', 'type': 'string'},\n                    'id': {'type': 'integer'},\n                    'name': {'type': 'string'},\n                    'phone': {'type': 'string'}},\n     'required': ['id', 'name', 'email'],\n     'type': 'object'}\n\nOn instance:\n    {'address': {'city': 'Wisokyburgh',\n                 'geo': {'lat': '-43.9509', 'lng': '-34.4618'},\n                 'street': 'Victor Plains',\n                 'suite': 'Suite 879',\n                 'zipcode': '90566-7771'},\n     'company': {'bs': 'synergize scalable supply-chains',\n                 'catchPhrase': 'Proactive didactic contingency',\n                 'name': 'Deckow-Crist'},\n     'email': 'Shanna@melissa.tv',\n     'id': 2,\n     'name': 'Ervin Howell',\n     'phone': '010-692-6593 x09125',\n     'username': 'Antonette',\n     'website': 'anastasia.net'}", "trace": "response = <Response [200]>\nschema = {'additionalProperties': False, 'properties': {'created_at': {'format': 'date-time', 'type': 'string'}, 'email': {'for...'}, 'id': {'type': 'integer'}, 'name': {'type': 'string'}, ...}, 'required': ['id', 'name', 'email'], 'type': 'object'}\n\n    @staticmethod\n    def assert_schema_valid(response, schema):\n        \"\"\"\n        Assert that the response JSON matches the given schema.\n    \n        Args:\n            response: The response object\n            schema: JSONSchema to validate against\n    \n        Raises:\n            AssertionError: If schema validation fails\n        \"\"\"\n        json_data = APIAssertions.assert_json_response(response)\n        try:\n>           jsonschema.validate(instance=json_data, schema=schema)\n\nutils\\assertions.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'address': {'city': 'Wisokyburgh', 'geo': {'lat': '-43.9509', 'lng': '-34.4618'}, 'street': 'Victor Plains', 'suite':..., 'catchPhrase': 'Proactive didactic contingency', 'name': 'Deckow-Crist'}, 'email': 'Shanna@melissa.tv', 'id': 2, ...}\nschema = {'additionalProperties': False, 'properties': {'created_at': {'format': 'date-time', 'type': 'string'}, 'email': {'for...'}, 'id': {'type': 'integer'}, 'name': {'type': 'string'}, ...}, 'required': ['id', 'name', 'email'], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'additionalProperties': False, 'properties': {'created_at': {'format': 'date-time', 'type...teger'}, 'name': {'type': 'string'}, ...}, 'required': ['id', 'name', 'email'], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\nE           \nE           Failed validating 'additionalProperties' in schema:\nE               {'additionalProperties': False,\nE                'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\nE                               'email': {'format': 'email', 'type': 'string'},\nE                               'id': {'type': 'integer'},\nE                               'name': {'type': 'string'},\nE                               'phone': {'type': 'string'}},\nE                'required': ['id', 'name', 'email'],\nE                'type': 'object'}\nE           \nE           On instance:\nE               {'address': {'city': 'Wisokyburgh',\nE                            'geo': {'lat': '-43.9509', 'lng': '-34.4618'},\nE                            'street': 'Victor Plains',\nE                            'suite': 'Suite 879',\nE                            'zipcode': '90566-7771'},\nE                'company': {'bs': 'synergize scalable supply-chains',\nE                            'catchPhrase': 'Proactive didactic contingency',\nE                            'name': 'Deckow-Crist'},\nE                'email': 'Shanna@melissa.tv',\nE                'id': 2,\nE                'name': 'Ervin Howell',\nE                'phone': '010-692-6593 x09125',\nE                'username': 'Antonette',\nE                'website': 'anastasia.net'}\n\n..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\jsonschema\\validators.py:1307: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.TestUsersAPI object at 0x0000023E0297B490>\napi_client = <api_client.client.APIClient object at 0x0000023E028C30E0>, user_id = 2\n\n    @allure.story(\"Get user by ID\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"user_id\", [1, 2, 3])\n    def test_get_user_by_id(self, api_client, user_id):\n        \"\"\"Test getting a single user by ID.\"\"\"\n        # Arrange\n        endpoint = f\"/users/{user_id}\"\n    \n        # Act\n        with allure.step(f\"Send GET request to /users/{user_id} endpoint\"):\n            response = api_client.get(endpoint)\n    \n        # Assert\n        with allure.step(\"Verify response status code is 200\"):\n            APIAssertions.assert_status_code(response, 200)\n    \n        with allure.step(\"Verify response matches user schema\"):\n>           APIAssertions.assert_schema_valid(response, USER_SCHEMA)\n\ntests\\test_api.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>\nschema = {'additionalProperties': False, 'properties': {'created_at': {'format': 'date-time', 'type': 'string'}, 'email': {'for...'}, 'id': {'type': 'integer'}, 'name': {'type': 'string'}, ...}, 'required': ['id', 'name', 'email'], 'type': 'object'}\n\n    @staticmethod\n    def assert_schema_valid(response, schema):\n        \"\"\"\n        Assert that the response JSON matches the given schema.\n    \n        Args:\n            response: The response object\n            schema: JSONSchema to validate against\n    \n        Raises:\n            AssertionError: If schema validation fails\n        \"\"\"\n        json_data = APIAssertions.assert_json_response(response)\n        try:\n            jsonschema.validate(instance=json_data, schema=schema)\n        except jsonschema.exceptions.ValidationError as e:\n>           raise AssertionError(f\"Response doesn't match schema: {str(e)}\")\nE           AssertionError: Response doesn't match schema: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\nE           \nE           Failed validating 'additionalProperties' in schema:\nE               {'additionalProperties': False,\nE                'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\nE                               'email': {'format': 'email', 'type': 'string'},\nE                               'id': {'type': 'integer'},\nE                               'name': {'type': 'string'},\nE                               'phone': {'type': 'string'}},\nE                'required': ['id', 'name', 'email'],\nE                'type': 'object'}\nE           \nE           On instance:\nE               {'address': {'city': 'Wisokyburgh',\nE                            'geo': {'lat': '-43.9509', 'lng': '-34.4618'},\nE                            'street': 'Victor Plains',\nE                            'suite': 'Suite 879',\nE                            'zipcode': '90566-7771'},\nE                'company': {'bs': 'synergize scalable supply-chains',\nE                            'catchPhrase': 'Proactive didactic contingency',\nE                            'name': 'Deckow-Crist'},\nE                'email': 'Shanna@melissa.tv',\nE                'id': 2,\nE                'name': 'Ervin Howell',\nE                'phone': '010-692-6593 x09125',\nE                'username': 'Antonette',\nE                'website': 'anastasia.net'}\n\nutils\\assertions.py:58: AssertionError"}, "description": "Test getting a single user by ID.", "steps": [{"name": "Send GET request to /users/2 endpoint", "status": "passed", "start": 1745835201613, "stop": 1745835201860}, {"name": "Verify response status code is 200", "status": "passed", "start": 1745835201860, "stop": 1745835201860}, {"name": "Verify response matches user schema", "status": "failed", "statusDetails": {"message": "AssertionError: Response doesn't match schema: Additional properties are not allowed ('address', 'company', 'username', 'website' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'properties': {'created_at': {'format': 'date-time', 'type': 'string'},\n                    'email': {'format': 'email', 'type': 'string'},\n                    'id': {'type': 'integer'},\n                    'name': {'type': 'string'},\n                    'phone': {'type': 'string'}},\n     'required': ['id', 'name', 'email'],\n     'type': 'object'}\n\nOn instance:\n    {'address': {'city': 'Wisokyburgh',\n                 'geo': {'lat': '-43.9509', 'lng': '-34.4618'},\n                 'street': 'Victor Plains',\n                 'suite': 'Suite 879',\n                 'zipcode': '90566-7771'},\n     'company': {'bs': 'synergize scalable supply-chains',\n                 'catchPhrase': 'Proactive didactic contingency',\n                 'name': 'Deckow-Crist'},\n     'email': 'Shanna@melissa.tv',\n     'id': 2,\n     'name': 'Ervin Howell',\n     'phone': '010-692-6593 x09125',\n     'username': 'Antonette',\n     'website': 'anastasia.net'}\n", "trace": "  File \"C:\\Users\\HP\\Desktop\\rest_api_framework\\tests\\test_api.py\", line 52, in test_get_user_by_id\n    APIAssertions.assert_schema_valid(response, USER_SCHEMA)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\HP\\Desktop\\rest_api_framework\\utils\\assertions.py\", line 58, in assert_schema_valid\n    raise AssertionError(f\"Response doesn't match schema: {str(e)}\")\n"}, "start": 1745835201860, "stop": 1745835201866}], "attachments": [{"name": "log", "source": "e06ed3e9-1193-43fd-9c7a-813c31721a75-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user_id", "value": "2"}], "start": 1745835201613, "stop": 1745835201869, "uuid": "13add1ba-493b-49fa-b4bf-5dd097fcb916", "historyId": "d4f624ae5e76ecde2f95422888d40f10", "testCaseId": "1f9abcdd4a5d5fe7acef65a439c36dcd", "fullName": "tests.test_api.TestUsersAPI#test_get_user_by_id", "labels": [{"name": "epic", "value": "REST API Testing Framework"}, {"name": "feature", "value": "Users API"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Get user by ID"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestUsersAPI"}, {"name": "host", "value": "DESKTOP-B9J8G71"}, {"name": "thread", "value": "10672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}